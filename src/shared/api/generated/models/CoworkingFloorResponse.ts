/* tslint:disable */
/* eslint-disable */
/**
 * CRM API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoworkingFloorRoomResponse } from './CoworkingFloorRoomResponse';
import {
    CoworkingFloorRoomResponseFromJSON,
    CoworkingFloorRoomResponseFromJSONTyped,
    CoworkingFloorRoomResponseToJSON,
    CoworkingFloorRoomResponseToJSONTyped,
} from './CoworkingFloorRoomResponse';
import type { CoworkingFloorPlaceResponse } from './CoworkingFloorPlaceResponse';
import {
    CoworkingFloorPlaceResponseFromJSON,
    CoworkingFloorPlaceResponseFromJSONTyped,
    CoworkingFloorPlaceResponseToJSON,
    CoworkingFloorPlaceResponseToJSONTyped,
} from './CoworkingFloorPlaceResponse';

/**
 * 
 * @export
 * @interface CoworkingFloorResponse
 */
export interface CoworkingFloorResponse {
    /**
     * 
     * @type {string}
     * @memberof CoworkingFloorResponse
     */
    floorId: string;
    /**
     * 
     * @type {Array<CoworkingFloorPlaceResponse>}
     * @memberof CoworkingFloorResponse
     */
    places: Array<CoworkingFloorPlaceResponse>;
    /**
     * 
     * @type {Array<CoworkingFloorRoomResponse>}
     * @memberof CoworkingFloorResponse
     */
    rooms: Array<CoworkingFloorRoomResponse>;
    /**
     * 
     * @type {number}
     * @memberof CoworkingFloorResponse
     */
    freePlaces: number;
    /**
     * 
     * @type {number}
     * @memberof CoworkingFloorResponse
     */
    floorOrder: number;
}

/**
 * Check if a given object implements the CoworkingFloorResponse interface.
 */
export function instanceOfCoworkingFloorResponse(value: object): value is CoworkingFloorResponse {
    if (!('floorId' in value) || value['floorId'] === undefined) return false;
    if (!('places' in value) || value['places'] === undefined) return false;
    if (!('rooms' in value) || value['rooms'] === undefined) return false;
    if (!('freePlaces' in value) || value['freePlaces'] === undefined) return false;
    if (!('floorOrder' in value) || value['floorOrder'] === undefined) return false;
    return true;
}

export function CoworkingFloorResponseFromJSON(json: any): CoworkingFloorResponse {
    return CoworkingFloorResponseFromJSONTyped(json, false);
}

export function CoworkingFloorResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoworkingFloorResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'floorId': json['floor_id'],
        'places': ((json['places'] as Array<any>).map(CoworkingFloorPlaceResponseFromJSON)),
        'rooms': ((json['rooms'] as Array<any>).map(CoworkingFloorRoomResponseFromJSON)),
        'freePlaces': json['free_places'],
        'floorOrder': json['floor_order'],
    };
}

export function CoworkingFloorResponseToJSON(json: any): CoworkingFloorResponse {
    return CoworkingFloorResponseToJSONTyped(json, false);
}

export function CoworkingFloorResponseToJSONTyped(value?: CoworkingFloorResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'floor_id': value['floorId'],
        'places': ((value['places'] as Array<any>).map(CoworkingFloorPlaceResponseToJSON)),
        'rooms': ((value['rooms'] as Array<any>).map(CoworkingFloorRoomResponseToJSON)),
        'free_places': value['freePlaces'],
        'floor_order': value['floorOrder'],
    };
}

