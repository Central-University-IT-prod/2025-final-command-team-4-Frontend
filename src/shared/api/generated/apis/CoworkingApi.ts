/* tslint:disable */
/* eslint-disable */
/**
 * CRM API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoworkingElementResponse,
  CoworkingResponse,
  UploadFloorImageRequest,
} from '../models/index';
import {
    CoworkingElementResponseFromJSON,
    CoworkingElementResponseToJSON,
    CoworkingResponseFromJSON,
    CoworkingResponseToJSON,
    UploadFloorImageRequestFromJSON,
    UploadFloorImageRequestToJSON,
} from '../models/index';

export interface DownloadFloorImageRequest {
    floorId: string;
}

export interface FindCoworkingSpaceRequest {
    coworkingId: string;
    startAt: Date;
    endAt: Date;
}

export interface UploadFloorImageOperationRequest {
    floorId: string;
    uploadFloorImageRequest?: UploadFloorImageRequest;
}

/**
 * 
 */
export class CoworkingApi extends runtime.BaseAPI {

    /**
     * download-floor-image
     */
    async downloadFloorImageRaw(requestParameters: DownloadFloorImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['floorId'] == null) {
            throw new runtime.RequiredError(
                'floorId',
                'Required parameter "floorId" was null or undefined when calling downloadFloorImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/coworking/floor/{floorId}/image`.replace(`{${"floorId"}}`, encodeURIComponent(String(requestParameters['floorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * download-floor-image
     */
    async downloadFloorImage(requestParameters: DownloadFloorImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadFloorImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * find-all
     */
    async findAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoworkingElementResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/coworking`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoworkingElementResponseFromJSON));
    }

    /**
     * find-all
     */
    async findAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoworkingElementResponse>> {
        const response = await this.findAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * find-by-id
     */
    async findCoworkingSpaceRaw(requestParameters: FindCoworkingSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoworkingResponse>> {
        if (requestParameters['coworkingId'] == null) {
            throw new runtime.RequiredError(
                'coworkingId',
                'Required parameter "coworkingId" was null or undefined when calling findCoworkingSpace().'
            );
        }

        if (requestParameters['startAt'] == null) {
            throw new runtime.RequiredError(
                'startAt',
                'Required parameter "startAt" was null or undefined when calling findCoworkingSpace().'
            );
        }

        if (requestParameters['endAt'] == null) {
            throw new runtime.RequiredError(
                'endAt',
                'Required parameter "endAt" was null or undefined when calling findCoworkingSpace().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = (requestParameters['startAt'] as any).toISOString();
        }

        if (requestParameters['endAt'] != null) {
            queryParameters['endAt'] = (requestParameters['endAt'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/coworking/{coworkingId}`.replace(`{${"coworkingId"}}`, encodeURIComponent(String(requestParameters['coworkingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoworkingResponseFromJSON(jsonValue));
    }

    /**
     * find-by-id
     */
    async findCoworkingSpace(requestParameters: FindCoworkingSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoworkingResponse> {
        const response = await this.findCoworkingSpaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * upload-floor-image
     */
    async uploadFloorImageRaw(requestParameters: UploadFloorImageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['floorId'] == null) {
            throw new runtime.RequiredError(
                'floorId',
                'Required parameter "floorId" was null or undefined when calling uploadFloorImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/coworking/floor/{floorId}/image`.replace(`{${"floorId"}}`, encodeURIComponent(String(requestParameters['floorId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadFloorImageRequestToJSON(requestParameters['uploadFloorImageRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * upload-floor-image
     */
    async uploadFloorImage(requestParameters: UploadFloorImageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uploadFloorImageRaw(requestParameters, initOverrides);
    }

}
