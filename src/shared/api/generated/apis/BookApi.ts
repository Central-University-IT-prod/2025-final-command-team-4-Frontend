/* tslint:disable */
/* eslint-disable */
/**
 * CRM API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoworkingAccountBookResponse,
  CoworkingBookResponse,
  CoworkingFloorPlaceResponse,
  CoworkingFloorRoomResponse,
} from '../models/index';
import {
    CoworkingAccountBookResponseFromJSON,
    CoworkingAccountBookResponseToJSON,
    CoworkingBookResponseFromJSON,
    CoworkingBookResponseToJSON,
    CoworkingFloorPlaceResponseFromJSON,
    CoworkingFloorPlaceResponseToJSON,
    CoworkingFloorRoomResponseFromJSON,
    CoworkingFloorRoomResponseToJSON,
} from '../models/index';

export interface CreateBookPlaceRequest {
    coworkingId: string;
    placeId: string;
    startAt: Date;
    endAt: Date;
}

export interface CreateBookRoomRequest {
    coworkingId: string;
    roomId: string;
    startAt: Date;
    endAt: Date;
}

export interface DeleteBookPlaceRequest {
    bookId: string;
}

export interface DeleteBookRoomRequest {
    bookId: string;
}

export interface GetAccountHistoryRequest {
    page?: number;
    size?: number;
}

export interface GetActiveAccountBookingsRequest {
    page: number;
    size: number;
}

export interface GetAllBookingsRequest {
    page?: number;
    size?: number;
}

export interface PutBookPlaceRequest {
    bookId: string;
    startAt: Date;
    endAt: Date;
}

export interface PutBookRoomRequest {
    bookId: string;
    startAt: Date;
    endAt: Date;
}

export interface VerifyPlaceBookRequest {
    placeBookId: string;
}

export interface VerifyRoomBookRequest {
    roomBookId: string;
}

/**
 * 
 */
export class BookApi extends runtime.BaseAPI {

    /**
     * book-place
     */
    async createBookPlaceRaw(requestParameters: CreateBookPlaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoworkingBookResponse>> {
        if (requestParameters['coworkingId'] == null) {
            throw new runtime.RequiredError(
                'coworkingId',
                'Required parameter "coworkingId" was null or undefined when calling createBookPlace().'
            );
        }

        if (requestParameters['placeId'] == null) {
            throw new runtime.RequiredError(
                'placeId',
                'Required parameter "placeId" was null or undefined when calling createBookPlace().'
            );
        }

        if (requestParameters['startAt'] == null) {
            throw new runtime.RequiredError(
                'startAt',
                'Required parameter "startAt" was null or undefined when calling createBookPlace().'
            );
        }

        if (requestParameters['endAt'] == null) {
            throw new runtime.RequiredError(
                'endAt',
                'Required parameter "endAt" was null or undefined when calling createBookPlace().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = (requestParameters['startAt'] as any).toISOString();
        }

        if (requestParameters['endAt'] != null) {
            queryParameters['endAt'] = (requestParameters['endAt'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/coworking/{coworkingId}/place/{placeId}`.replace(`{${"coworkingId"}}`, encodeURIComponent(String(requestParameters['coworkingId']))).replace(`{${"placeId"}}`, encodeURIComponent(String(requestParameters['placeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoworkingBookResponseFromJSON(jsonValue));
    }

    /**
     * book-place
     */
    async createBookPlace(requestParameters: CreateBookPlaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoworkingBookResponse> {
        const response = await this.createBookPlaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * book-room
     */
    async createBookRoomRaw(requestParameters: CreateBookRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoworkingBookResponse>> {
        if (requestParameters['coworkingId'] == null) {
            throw new runtime.RequiredError(
                'coworkingId',
                'Required parameter "coworkingId" was null or undefined when calling createBookRoom().'
            );
        }

        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling createBookRoom().'
            );
        }

        if (requestParameters['startAt'] == null) {
            throw new runtime.RequiredError(
                'startAt',
                'Required parameter "startAt" was null or undefined when calling createBookRoom().'
            );
        }

        if (requestParameters['endAt'] == null) {
            throw new runtime.RequiredError(
                'endAt',
                'Required parameter "endAt" was null or undefined when calling createBookRoom().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = (requestParameters['startAt'] as any).toISOString();
        }

        if (requestParameters['endAt'] != null) {
            queryParameters['endAt'] = (requestParameters['endAt'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/coworking/{coworkingId}/room/{roomId}`.replace(`{${"coworkingId"}}`, encodeURIComponent(String(requestParameters['coworkingId']))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters['roomId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoworkingBookResponseFromJSON(jsonValue));
    }

    /**
     * book-room
     */
    async createBookRoom(requestParameters: CreateBookRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoworkingBookResponse> {
        const response = await this.createBookRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * book-delete
     */
    async deleteBookPlaceRaw(requestParameters: DeleteBookPlaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling deleteBookPlace().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/place/{bookId}`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * book-delete
     */
    async deleteBookPlace(requestParameters: DeleteBookPlaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBookPlaceRaw(requestParameters, initOverrides);
    }

    /**
     * book-delete
     */
    async deleteBookRoomRaw(requestParameters: DeleteBookRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling deleteBookRoom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/room/{bookId}`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * book-delete
     */
    async deleteBookRoom(requestParameters: DeleteBookRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBookRoomRaw(requestParameters, initOverrides);
    }

    /**
     * get-history
     */
    async getAccountHistoryRaw(requestParameters: GetAccountHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoworkingAccountBookResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/books/history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoworkingAccountBookResponseFromJSON));
    }

    /**
     * get-history
     */
    async getAccountHistory(requestParameters: GetAccountHistoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoworkingAccountBookResponse>> {
        const response = await this.getAccountHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get-active-campaigns
     */
    async getActiveAccountBookingsRaw(requestParameters: GetActiveAccountBookingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoworkingAccountBookResponse>>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling getActiveAccountBookings().'
            );
        }

        if (requestParameters['size'] == null) {
            throw new runtime.RequiredError(
                'size',
                'Required parameter "size" was null or undefined when calling getActiveAccountBookings().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/coworking/books/active`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoworkingAccountBookResponseFromJSON));
    }

    /**
     * get-active-campaigns
     */
    async getActiveAccountBookings(requestParameters: GetActiveAccountBookingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoworkingAccountBookResponse>> {
        const response = await this.getActiveAccountBookingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get-all-bookings
     */
    async getAllBookingsRaw(requestParameters: GetAllBookingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoworkingAccountBookResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/coworking/books`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoworkingAccountBookResponseFromJSON));
    }

    /**
     * get-all-bookings
     */
    async getAllBookings(requestParameters: GetAllBookingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoworkingAccountBookResponse>> {
        const response = await this.getAllBookingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * book-place-edit
     */
    async putBookPlaceRaw(requestParameters: PutBookPlaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoworkingBookResponse>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling putBookPlace().'
            );
        }

        if (requestParameters['startAt'] == null) {
            throw new runtime.RequiredError(
                'startAt',
                'Required parameter "startAt" was null or undefined when calling putBookPlace().'
            );
        }

        if (requestParameters['endAt'] == null) {
            throw new runtime.RequiredError(
                'endAt',
                'Required parameter "endAt" was null or undefined when calling putBookPlace().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = (requestParameters['startAt'] as any).toISOString();
        }

        if (requestParameters['endAt'] != null) {
            queryParameters['endAt'] = (requestParameters['endAt'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/place/{bookId}`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoworkingBookResponseFromJSON(jsonValue));
    }

    /**
     * book-place-edit
     */
    async putBookPlace(requestParameters: PutBookPlaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoworkingBookResponse> {
        const response = await this.putBookPlaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * book-room-edit
     */
    async putBookRoomRaw(requestParameters: PutBookRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoworkingBookResponse>> {
        if (requestParameters['bookId'] == null) {
            throw new runtime.RequiredError(
                'bookId',
                'Required parameter "bookId" was null or undefined when calling putBookRoom().'
            );
        }

        if (requestParameters['startAt'] == null) {
            throw new runtime.RequiredError(
                'startAt',
                'Required parameter "startAt" was null or undefined when calling putBookRoom().'
            );
        }

        if (requestParameters['endAt'] == null) {
            throw new runtime.RequiredError(
                'endAt',
                'Required parameter "endAt" was null or undefined when calling putBookRoom().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = (requestParameters['startAt'] as any).toISOString();
        }

        if (requestParameters['endAt'] != null) {
            queryParameters['endAt'] = (requestParameters['endAt'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/room/{bookId}`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters['bookId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoworkingBookResponseFromJSON(jsonValue));
    }

    /**
     * book-room-edit
     */
    async putBookRoom(requestParameters: PutBookRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoworkingBookResponse> {
        const response = await this.putBookRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * verify-place-book
     */
    async verifyPlaceBookRaw(requestParameters: VerifyPlaceBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoworkingFloorPlaceResponse>> {
        if (requestParameters['placeBookId'] == null) {
            throw new runtime.RequiredError(
                'placeBookId',
                'Required parameter "placeBookId" was null or undefined when calling verifyPlaceBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/coworking/verify/place/{placeBookId}`.replace(`{${"placeBookId"}}`, encodeURIComponent(String(requestParameters['placeBookId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoworkingFloorPlaceResponseFromJSON(jsonValue));
    }

    /**
     * verify-place-book
     */
    async verifyPlaceBook(requestParameters: VerifyPlaceBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoworkingFloorPlaceResponse> {
        const response = await this.verifyPlaceBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * verify-room-book
     */
    async verifyRoomBookRaw(requestParameters: VerifyRoomBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoworkingFloorRoomResponse>> {
        if (requestParameters['roomBookId'] == null) {
            throw new runtime.RequiredError(
                'roomBookId',
                'Required parameter "roomBookId" was null or undefined when calling verifyRoomBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/coworking/verify/room/{roomBookId}`.replace(`{${"roomBookId"}}`, encodeURIComponent(String(requestParameters['roomBookId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoworkingFloorRoomResponseFromJSON(jsonValue));
    }

    /**
     * verify-room-book
     */
    async verifyRoomBook(requestParameters: VerifyRoomBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoworkingFloorRoomResponse> {
        const response = await this.verifyRoomBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
