/* tslint:disable */
/* eslint-disable */
/**
 * CRM API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountProfilePutRequest,
  AccountProfileResponse,
  AccountSignInRequest,
  AccountSignInResponse,
  AccountSignUpRequest,
  AccountSignUpResponse,
  UploadFloorImageRequest,
} from '../models/index';
import {
    AccountProfilePutRequestFromJSON,
    AccountProfilePutRequestToJSON,
    AccountProfileResponseFromJSON,
    AccountProfileResponseToJSON,
    AccountSignInRequestFromJSON,
    AccountSignInRequestToJSON,
    AccountSignInResponseFromJSON,
    AccountSignInResponseToJSON,
    AccountSignUpRequestFromJSON,
    AccountSignUpRequestToJSON,
    AccountSignUpResponseFromJSON,
    AccountSignUpResponseToJSON,
    UploadFloorImageRequestFromJSON,
    UploadFloorImageRequestToJSON,
} from '../models/index';

export interface DownloadAvatarRequest {
    login: string;
}

export interface GetAccountsRequest {
    page?: number;
    size?: number;
}

export interface GetProfileRequest {
    login: string;
}

export interface PutProfileRequest {
    accountProfilePutRequest: AccountProfilePutRequest;
}

export interface SignInRequest {
    accountSignInRequest: AccountSignInRequest;
}

export interface SignUpRequest {
    accountSignUpRequest: AccountSignUpRequest;
}

export interface UpdateUserProfileRequest {
    login: string;
    accountProfilePutRequest: AccountProfilePutRequest;
}

export interface UploadAvatarRequest {
    uploadFloorImageRequest?: UploadFloorImageRequest;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     * download-avatar
     */
    async downloadAvatarRaw(requestParameters: DownloadAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['login'] == null) {
            throw new runtime.RequiredError(
                'login',
                'Required parameter "login" was null or undefined when calling downloadAvatar().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/account/{login}/avatars`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters['login']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * download-avatar
     */
    async downloadAvatar(requestParameters: DownloadAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadAvatarRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get-accounts
     */
    async getAccountsRaw(requestParameters: GetAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AccountProfileResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountProfileResponseFromJSON));
    }

    /**
     * get-accounts
     */
    async getAccounts(requestParameters: GetAccountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AccountProfileResponse>> {
        const response = await this.getAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get-current-user-profile
     */
    async getCurrentUserProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountProfileResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/account/@me/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountProfileResponseFromJSON(jsonValue));
    }

    /**
     * get-current-user-profile
     */
    async getCurrentUserProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountProfileResponse> {
        const response = await this.getCurrentUserProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * get-profile
     */
    async getProfileRaw(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountProfileResponse>> {
        if (requestParameters['login'] == null) {
            throw new runtime.RequiredError(
                'login',
                'Required parameter "login" was null or undefined when calling getProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/account/{login}/profile`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters['login']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountProfileResponseFromJSON(jsonValue));
    }

    /**
     * get-profile
     */
    async getProfile(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountProfileResponse> {
        const response = await this.getProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * put-profile
     */
    async putProfileRaw(requestParameters: PutProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountProfileResponse>> {
        if (requestParameters['accountProfilePutRequest'] == null) {
            throw new runtime.RequiredError(
                'accountProfilePutRequest',
                'Required parameter "accountProfilePutRequest" was null or undefined when calling putProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/account/@me/profile`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AccountProfilePutRequestToJSON(requestParameters['accountProfilePutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountProfileResponseFromJSON(jsonValue));
    }

    /**
     * put-profile
     */
    async putProfile(requestParameters: PutProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountProfileResponse> {
        const response = await this.putProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * sign-in
     */
    async signInRaw(requestParameters: SignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountSignInResponse>> {
        if (requestParameters['accountSignInRequest'] == null) {
            throw new runtime.RequiredError(
                'accountSignInRequest',
                'Required parameter "accountSignInRequest" was null or undefined when calling signIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/account/sign-in`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountSignInRequestToJSON(requestParameters['accountSignInRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountSignInResponseFromJSON(jsonValue));
    }

    /**
     * sign-in
     */
    async signIn(requestParameters: SignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountSignInResponse> {
        const response = await this.signInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * sign-up
     */
    async signUpRaw(requestParameters: SignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountSignUpResponse>> {
        if (requestParameters['accountSignUpRequest'] == null) {
            throw new runtime.RequiredError(
                'accountSignUpRequest',
                'Required parameter "accountSignUpRequest" was null or undefined when calling signUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/account/sign-up`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountSignUpRequestToJSON(requestParameters['accountSignUpRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountSignUpResponseFromJSON(jsonValue));
    }

    /**
     * sign-up
     */
    async signUp(requestParameters: SignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountSignUpResponse> {
        const response = await this.signUpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update-account-profile
     */
    async updateUserProfileRaw(requestParameters: UpdateUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountProfileResponse>> {
        if (requestParameters['login'] == null) {
            throw new runtime.RequiredError(
                'login',
                'Required parameter "login" was null or undefined when calling updateUserProfile().'
            );
        }

        if (requestParameters['accountProfilePutRequest'] == null) {
            throw new runtime.RequiredError(
                'accountProfilePutRequest',
                'Required parameter "accountProfilePutRequest" was null or undefined when calling updateUserProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/account/{login}/profile`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters['login']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AccountProfilePutRequestToJSON(requestParameters['accountProfilePutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountProfileResponseFromJSON(jsonValue));
    }

    /**
     * update-account-profile
     */
    async updateUserProfile(requestParameters: UpdateUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountProfileResponse> {
        const response = await this.updateUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * upload-avatar
     */
    async uploadAvatarRaw(requestParameters: UploadAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountProfileResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/account/avatars`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadFloorImageRequestToJSON(requestParameters['uploadFloorImageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountProfileResponseFromJSON(jsonValue));
    }

    /**
     * upload-avatar
     */
    async uploadAvatar(requestParameters: UploadAvatarRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountProfileResponse> {
        const response = await this.uploadAvatarRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
