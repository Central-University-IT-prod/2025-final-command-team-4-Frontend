/* tslint:disable */
/* eslint-disable */
/**
 * CRM API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoworkingAnnouncementRequest,
  CoworkingAnnouncementResponse,
} from '../models/index';
import {
    CoworkingAnnouncementRequestFromJSON,
    CoworkingAnnouncementRequestToJSON,
    CoworkingAnnouncementResponseFromJSON,
    CoworkingAnnouncementResponseToJSON,
} from '../models/index';

export interface CreateRequest {
    coworkingAnnouncementRequest: CoworkingAnnouncementRequest;
}

export interface GetAnnouncementsRequest {
    page?: number;
    size?: number;
}

/**
 * 
 */
export class AnnouncementApi extends runtime.BaseAPI {

    /**
     * create-announcement
     */
    async createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoworkingAnnouncementResponse>> {
        if (requestParameters['coworkingAnnouncementRequest'] == null) {
            throw new runtime.RequiredError(
                'coworkingAnnouncementRequest',
                'Required parameter "coworkingAnnouncementRequest" was null or undefined when calling create().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/announcement`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoworkingAnnouncementRequestToJSON(requestParameters['coworkingAnnouncementRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoworkingAnnouncementResponseFromJSON(jsonValue));
    }

    /**
     * create-announcement
     */
    async create(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoworkingAnnouncementResponse> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get-announcements
     */
    async getAnnouncementsRaw(requestParameters: GetAnnouncementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoworkingAnnouncementResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/announcement`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoworkingAnnouncementResponseFromJSON));
    }

    /**
     * get-announcements
     */
    async getAnnouncements(requestParameters: GetAnnouncementsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoworkingAnnouncementResponse>> {
        const response = await this.getAnnouncementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
